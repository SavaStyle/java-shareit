{
	"info": {
		"_postman_id": "c3f0d802-a405-4875-a270-b40d5d5a071e",
		"name": "KTE Labs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27731801"
	},
	"item": [
		{
			"name": "addDoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, name, and speciality\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('speciality');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Speciality is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.speciality).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Speciality should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Vasily\",\r\n    \"speciality\": \"LOR\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/doctor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"doctor"
					]
				}
			},
			"response": []
		},
		{
			"name": "addPatient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, name, and dateOfBirth\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.have.property('id');\r",
							"  pm.expect(responseData).to.have.property('name');\r",
							"  pm.expect(responseData).to.have.property('dateOfBirth');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Date of Birth is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Pavel\",\r\n    \"dateOfBirth\": \"2022-10-20\"\r\n}\r\n ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/patient",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"patient"
					]
				}
			},
			"response": []
		},
		{
			"name": "createSchedule",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.to.have.status(201));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Doctor object should exist and have specific properties\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.doctor).to.exist;\r",
							"  pm.expect(responseData.doctor).to.be.an('object');\r",
							"  pm.expect(responseData.doctor.id).to.exist.and.to.be.a('number');\r",
							"  pm.expect(responseData.doctor.name).to.exist.and.to.be.a('string');\r",
							"  pm.expect(responseData.doctor.speciality).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"TimeSlot array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.timeSlot).to.be.an('array');\r",
							"    pm.expect(responseData.timeSlot).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Doctor's name and speciality are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.doctor).to.be.an('object');\r",
							"  pm.expect(responseData.doctor.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  pm.expect(responseData.doctor.speciality).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Speciality should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://localhost:8080/v1/schedule/createSchedule?date=2024-02-10&docId=1&start=09:00:00&end=18:00:00&durationOfTreatment=00:30:00",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"schedule",
						"createSchedule"
					],
					"query": [
						{
							"key": "date",
							"value": "2024-02-10"
						},
						{
							"key": "docId",
							"value": "1"
						},
						{
							"key": "start",
							"value": "09:00:00"
						},
						{
							"key": "end",
							"value": "18:00:00"
						},
						{
							"key": "durationOfTreatment",
							"value": "00:30:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "freeSlots",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, timeSlot, available, and scheduleId\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(slot) {\r",
							"    pm.expect(slot).to.have.property('id');\r",
							"    pm.expect(slot).to.have.property('timeSlot');\r",
							"    pm.expect(slot).to.have.property('available');\r",
							"    pm.expect(slot).to.have.property('scheduleId');\r",
							"  });\r",
							"});\r",
							" \r",
							"\r",
							"pm.test(\"Available field is a boolean\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(slot) {\r",
							"    pm.expect(slot.available).to.be.a('boolean');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ScheduleId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(slot) {\r",
							"        pm.expect(slot.scheduleId).to.be.a('number');\r",
							"        pm.expect(slot.scheduleId).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/schedule/freeSlots?date=2024-02-10&docId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"schedule",
						"freeSlots"
					],
					"query": [
						{
							"key": "date",
							"value": "2024-02-10"
						},
						{
							"key": "docId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "makeTicket",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.doctorId).to.exist;\r",
							"    pm.expect(responseData.patientId).to.exist;\r",
							"    pm.expect(responseData.visitTime).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Doctor name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.doctorId.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Doctor name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Patient date of birth is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.patientId.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Visit time is in a valid time format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.visitTime).to.match(/^\\d{2}:\\d{2}:\\d{2}$/);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/schedule/makeTicket?date=2024-02-10&docId=1&patientId=1&visitTime=17:30:00",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"schedule",
						"makeTicket"
					],
					"query": [
						{
							"key": "date",
							"value": "2024-02-10"
						},
						{
							"key": "docId",
							"value": "1"
						},
						{
							"key": "patientId",
							"value": "1"
						},
						{
							"key": "visitTime",
							"value": "17:30:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "makeTicket (wrong time)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"}); \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/schedule/makeTicket?date=2024-02-10&docId=1&patientId=1&visitTime=17:10:00",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"schedule",
						"makeTicket"
					],
					"query": [
						{
							"key": "date",
							"value": "2024-02-10"
						},
						{
							"key": "docId",
							"value": "1"
						},
						{
							"key": "patientId",
							"value": "1"
						},
						{
							"key": "visitTime",
							"value": "17:10:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllTicketsByPatient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(ticket) {\r",
							"    pm.expect(ticket).to.have.property('id');\r",
							"    pm.expect(ticket).to.have.property('doctorId');\r",
							"    pm.expect(ticket).to.have.property('patientId');\r",
							"    pm.expect(ticket).to.have.property('visitTime');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Patient's name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(ticket) {\r",
							"    pm.expect(ticket.patientId.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/schedule/ticketsByPatient/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"schedule",
						"ticketsByPatient",
						"1"
					]
				}
			},
			"response": []
		}
	]
}